@using FluentValidation

<div class="register">
    <h3>Register</h3>

    <EditForm Model="Command" OnValidSubmit="Submit">
        <FluentValidation.FluentValidator />
        <div class="field">
            <InputText id="Email" type="text" placeholder="Email address" @bind-Value="Command.Email" />
            <ValidationMessage For="() => Command.Email" />
        </div>
        <div class="field">
            <InputText id="Password" type="password" placeholder="Password" @bind-Value="Command.Password" />
            <ValidationMessage For="() => Command.Password" />
        </div>
        <div class="field">
            <InputText id="ConfirmPassword" type="password" placeholder="Confirm password" @bind-Value="Command.ConfirmPassword" />
            <ValidationMessage For="() => Command.ConfirmPassword" />
        </div>
        <div class="field">
            <InputText id="FirstName" type="text" placeholder="First name" @bind-Value="Command.FirstName" />
            <ValidationMessage For="() => Command.FirstName" />
        </div>
        <div class="field">
            <InputText id="LastName" type="text" placeholder="Last name" @bind-Value="Command.LastName" />
            <ValidationMessage For="() => Command.LastName" />
        </div>
        <SubmitButton Loading="loading" />
    </EditForm>
</div>

@code {
    private RegisterUser.Command Command { get; set; } = new RegisterUser.Command();
    bool loading = false;

    async void Submit()
    {
        loading = true;
        await Mediator.Send(Command);
        loading = false;
        base.StateHasChanged();
    }
}
